# Neural Style Transfer Script (neural_style_transfer.py)
# Import necessary libraries
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, models
from PIL import Image
import matplotlib.pyplot as plt
import copy

# Select device: GPU if available, else CPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Function to load and transform an image
def load_image(img_path, max_size=400):
    """
    Loads an image from the disk, resizes it, and applies normalization
    to prepare it for VGG19 input.
    """
    image = Image.open(img_path).convert('RGB')  # Open and convert to RGB
    transform = transforms.Compose([
        transforms.Resize((max_size, max_size)),  # Resize image
        transforms.ToTensor(),  # Convert to tensor
        transforms.Normalize(mean=[0.485, 0.456, 0.406],  # Normalize using ImageNet stats
                             std=[0.229, 0.224, 0.225])
    ])
    image = transform(image)[:3, :, :].unsqueeze(0)  # Add batch dimension
    return image.to(device)

# Function to reverse normalization and convert tensor to image
def im_convert(tensor):
    """
    Converts a normalized tensor back to a PIL image for visualization.
    """
    image = tensor.to("cpu").clone().detach()  # Move tensor to CPU
    image = image.squeeze(0)  # Remove batch dimension

    # Un-normalize the image (reverse of ImageNet normalization)
    image = image * torch.tenso*
